{"version":3,"sources":["components/EmojiForm.js","components/Footer.js","components/Title.js","lib/getURLs.js","pages/HomePage.js","pages/RedirectPage.js","App.js","serviceWorker.js","index.js"],"names":["emojiRegex","API_url","process","API_URL","params","headers","mode","cache","enableButton","document","getElementById","disabled","populateMessage","values","message","innerHTML","url","display","EmojiForm","initialValues","emojis","undefined","validationSchema","Yup","required","notRequired","matches","onSubmit","a","body","JSON","stringify","fetch","method","then","response","ok","json","status","Error","error","data","raw","catch","alert","stack","style","backgroundColodsr","width","className","htmlFor","name","type","placeholder","msg","id","Footer","marginLeft","href","fontSize","Title","role","aria-label","require","config","getAll","console","log","urls","map","doc","punycode","getUnique","res","HomePage","state","addresses","this","setState","key","React","Component","RedirectPage","props","address","match","emojiURL","redirectURL","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c17a1d95.chunk.js","sourcesContent":["import React from \"react\";\nimport { Formik, Field, Form, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"../styles/Form.css\";\n\nconst emojiRegex = /.*(\\u00a9|\\u00ae|[\\u2000-\\u3300]|\\ud83c[\\ud000-\\udfff]|\\ud83d[\\ud000-\\udfff]|\\ud83e[\\ud000-\\udfff])+.*/;\n\nconst API_url = process.env.API_URL || \"http://localhost:4000/api\";\nconst headers = { \"content-type\": \"application/json\" };\nconst params = {\n  headers: headers,\n  mode: \"cors\",\n  cache: \"default\",\n};\n\nfunction disableButton() {\n  document.getElementById(\"submitButton\").disabled = true;\n}\n\nfunction enableButton() {\n  document.getElementById(\"submitButton\").disabled = false;\n}\n\n// This is disgusting I know...\nfunction populateMessage(values) {\n  let message = document.getElementById(\"validationMessage\");\n  if (values.message) {\n    message.innerHTML = `\n      <div>${values.message}</div>\n    `;\n  } else {\n    message.innerHTML = `\n      <span>Your link: </span>\n      <a href=${values.url}>${values.display}</a>\n    `;\n  }\n}\n\nconst EmojiForm = () => {\n  return (\n    <>\n      <Formik\n        initialValues={{ url: \"\", emojis: undefined }}\n        validationSchema={Yup.object({\n          url: Yup.string().url(\"Must be a valid url\").required(\"Required\"),\n          emojis: Yup.string()\n            .notRequired()\n            .matches(emojiRegex, \"must contain at least one emoji...\"),\n        })}\n        onSubmit={async (values) => {\n          disableButton();\n          let body = JSON.stringify(values);\n          await fetch(`${API_url}/newURL`, {\n            method: \"POST\",\n            ...params,\n            body: body,\n          })\n            .then((response) => {\n              if (response.ok) {\n                return response.json();\n              } else if (response.status === 429) {\n                populateMessage({\n                  message: \"You are submitting too fast.\",\n                });\n              } else {\n                throw Error(response.error);\n              }\n            })\n            .then((data) => {\n              let url = `/${data.emojis}`;\n              let display = `emoj.yt/${data.raw}`;\n              populateMessage({\n                url: url,\n                display: display,\n              });\n              enableButton();\n            })\n            .catch((error) => {\n              alert(`${error.message}:\\n${error.stack}`);\n              enableButton();\n            });\n        }}\n      >\n        <Form style={{ backgroundColodsr: \"beige\", width: \"100%\" }}>\n          <div className=\"formContainer\">\n            <div className=\"fieldContainer\">\n              <label htmlFor=\"url\">URL</label>\n              <Field name=\"url\" type=\"url\" placeholder=\"url.domain.tld\" />\n              <ErrorMessage name=\"url\">\n                {(msg) => <div className=\"errorMessage\">{msg}</div>}\n              </ErrorMessage>\n            </div>\n            <div className=\"fieldContainer\">\n              <label htmlFor=\"emojis\">emojis</label>\n              <Field name=\"emojis\" type=\"text\" placeholder=\"emojis here...\" />\n              <ErrorMessage name=\"emojis\">\n                {(msg) => <div className=\"errorMessage\">{msg}</div>}\n              </ErrorMessage>\n            </div>\n            <div className=\"buttonContainer\">\n              <button type=\"submit\" id=\"submitButton\">\n                Submit\n              </button>\n            </div>\n          </div>\n        </Form>\n      </Formik>\n      <div id=\"validationMessage\"></div>\n    </>\n  );\n};\n\nexport default EmojiForm;\n","import React from \"react\";\nimport \"../styles/Footer.css\";\n\nexport default function Footer() {\n  return (\n    <footer className=\"pageFooter\">\n      <div className=\"footerItem\">\n        I'm using the Vulf Mono Font from{\" \"}\n        <a style={{ marginLeft: \"1%\" }} href=\"https://ohnotype.co\">\n          @ohnotypeco\n        </a>\n      </div>\n      <div className=\"footerItem\" style={{fontSize: \"normal\"}}>\n        Check me out at <a href=\"https://lucblassel.com\">lucblassel.com</a> and\n         on <a href=\"https://github.com/lucblassel\">github</a>\n      </div>\n    </footer>\n  );\n}\n","import React from \"react\";\nimport \"../styles/Title.css\";\n\nexport default function Title() {\n  return (\n    <h1 className=\"pageTitle\">\n      <span className=\"emojiFrame\">\n        <span role=\"img\" aria-label=\"wave-image\">\n          🌊\n        </span>\n        <span role=\"img\" aria-label=\"mask-image\">\n          👺\n        </span>\n      </span>\n      emoj.yt\n      <span className=\"emojiFrame\">\n        <span role=\"img\" aria-label=\"mask-image\">\n          👺\n        </span>\n        <span role=\"img\" aria-label=\"wave-image\">\n          🌊\n        </span>\n      </span>\n    </h1>\n  );\n}\n","\nrequire('dotenv').config();\n\nconst API_url = process.env.REACT_APP_API_URL || \"http://localhost:4000/api\";\n// const headers = new Headers({\"Access-Control-Allow-Origin\":\"*\"});\nconst params = {\n  headers: {\n    'Access-Control-Allow-Origin':'*'\n  },\n  mode: \"cors\",\n  cache: \"default\",\n};\n\nexport async function getAll() {\n  let urls = await fetch(`${API_url}/last/10`, { method: \"GET\", ...params })\n    .then((data) => {\n      return data.json();\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n\n  return urls.map((doc) => {\n    return { raw: doc.raw, punycode: doc.emojis };\n  });\n}\n\nexport async function getUnique(id) {\n  let res = await fetch(`${API_url}/${id}`, { method: \"GET\", ...params })\n    .then((data) => {\n      if (data.status !== 200) {\n          throw new Error(`request error, status code ${data.status}`)\n      }\n      return data.json();\n    })\n    .catch((error) => {\n      console.log(error);\n      return null;\n    });\n    return res;\n}\n","import React from \"react\";\nimport EmojiForm from \"../components/EmojiForm.js\";\nimport Footer from \"../components/Footer.js\";\nimport Title from \"../components/Title.js\";\nimport { getAll } from \"../lib/getURLs\";\nimport \"../styles/Home.css\";\n\nclass HomePage extends React.Component {\n    constructor() {\n      super();\n      this.state = {\n        addresses: [],\n      };\n    }\n  \n    async componentDidMount() {\n      let addresses = await getAll();\n      this.setState({\n        addresses: addresses,\n      });\n    }\n  \n    render() {\n      return (\n        <div className=\"pageContainer\">\n          <main className=\"mainBody\">\n\n            <Title/>\n            <p className=\"description\">encode urls as emoji strings!</p>\n            <EmojiForm />\n  \n            <div className=\"addressGrid\">\n              <h2>Latest entries: </h2>\n              {this.state.addresses.map((doc) => {\n                return (\n                  <a href={doc.punycode} className=\"link\" key={doc.punycode}>\n                    <h3>emoj.yt/{doc.raw}</h3>\n                  </a>\n                );\n              })}\n            </div>\n          </main>\n          \n          <Footer/>\n        </div>\n      );\n    }\n  }\n\nexport default HomePage;","import React from \"react\";\nimport { getUnique } from \"../lib/getURLs.js\";\nimport Footer from \"../components/Footer.js\";\nimport Title from \"../components/Title.js\";\nimport \"../styles/Redirect.css\";\n\nclass RedirectPage extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      address: null,\n    };\n  }\n\n  async componentDidMount() {\n    let address = await getUnique(this.props.match.params.id);\n    this.setState({\n      emojis: address.emojiURL,\n      url: address.redirectURL,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"pageContainer\">\n        <div className=\"mainBody\">\n          <div className=\"header\">\n            <Title/>\n          </div>\n          <div className=\"content\">\n            <div className=\"contentItem\">\n              This url: <br />\n              <a href={this.state.emojis}>{this.state.emojis}</a>\n            </div>\n            <div className=\"contentItem\">\n              Should redirect you to:\n              <br />\n              <a href={this.state.url}>{this.state.url}</a>\n            </div>\n          </div>\n          <div className=\"backButton\">\n            <a href=\"/\"> return <span role=\"img\" aria-label=\"home-image\">🏡</span></a>\n          </div>\n          <div className=\"description\">\n            <h4>Why am I seeing this page?</h4>\n            <p>This is just a little personal project of mine, and I do not check\n            if the shortened URLs are trusted or not. </p>\n            <p>Since I don't want people getting phished/scammed with\n            this website, you will always see this page and check what URL you\n            are getting redirected to.</p>\n          </div>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default RedirectPage;\n","import React from \"react\";\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage.js\";\nimport RedirectPage from \"./pages/RedirectPage\";\n\nconst App = () => {\n  return (\n    <>\n    <Router>\n      <Route exact path=\"/\" component={ HomePage } />\n      <Route exact path=\"/:id\" component={ RedirectPage } />\n    </Router>\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}